#!/usr/bin/perl
#
# verify_read  : regression script that  programs one or more registers, reads back
#                and fails if what is read back does not match what was sent
#
use Device::USB;
use Data::Dumper qw(Dumper);
srand( time() ^ ( $$ + ( $$ << 15 ) ) );

my $DNP=1;     # DNP = "Do Not Print", turn off echo packets
my $tmo=100;

# The following list of commands MUST be identical to the 
# typedef "pkttype_t"  in usbcmdio.h:
my $CMD_ACK       = 0;
my $CMD_NAK       = 1;
my $CMD_RESET     = 2;
my $CMD_ID        = 3;
my $CMD_WRITE_REG = 4;
my $CMD_READ_REG  = 5;
my $CMD_ECHO      = 6;
my $CMD_SSN       = 7;
my $CMD_ISN       = 8;
my $CMD_DIAG      = 9;

my $payload="";
my $hdr="";
my $txbuf="";
my $rxbuf="";
my $rx="";
my $usb = Device::USB->new();
my $dev = $usb->find_device( 0x1268, 0xfffe);

sub ConnectAndFind {
  my $verb = shift;  # accept a verbosity argument
  my $VERB = 0;      # default to silent
  if ($verb > 0) {
    $VERB=$verb;
  }
  $dev = $usb->find_device( 0x1268, 0xfffe);
  $dev->open();
  printf "Device: %04X:%04X\n", $dev->idVendor(), $dev->idProduct() if $VERB > 0;
  printf("Manufacturer: %s \nProduct: %s \n", $dev->manufacturer(),$dev->product()) if $VERB > 0;
  my $cfg = $dev->config()->[0];
  my $numIf = $cfg->bNumInterfaces();
  for (my $if=0; $if<$numIf; $if++) {
    my $inter = $cfg->interfaces()->[$if]->[0];
    my $numEp = $inter->bNumEndpoints();
    printf("Interface: 0x%x ",$if)                        if $VERB > 0;
    for (my $epnum=0; $epnum<$numEp; $epnum++) {
      my $ep = $inter->endpoints()->[$epnum];
      printf("  Endpoint: 0x%x", $ep->bEndpointAddress()) if $VERB > 0;
    }
    printf("\n")                                          if $VERB > 0;
  }
  my $rval=$dev->claim_interface(0x2);
  printf("Claim returns: $rval\n")                        if $VERB > 0;
}

# stub: cksums not computed: return zero for all checksums
# inputs:     payload
# output:     checksum (integer)
sub get_cksum () {
  my $payload = shift;
  my $cksum = 0;
  return $cksum;
}

# header = struct { len, cmd/type, checksum(int) }
# inputs:    CMD
#            payload
# output:    header (string)
sub set_hdr () {
  my $cmd = shift;
  my $payload = shift;
  my $hdr     = "";
  my $chksum  = &get_cksum($payload);
  # pack CCV: C => unsigned char, v => unsigned 16-bit int
  #           giving a total length of 4 bytes
  $hdr = pack("CCv",(length($payload) + 4),$cmd,$chksum);
  return $hdr;
}

# printf payload  contents
sub print_payload {
  my $rx_payload = shift;
  my $pl_len = length($rx_payload);
  my $lcnt=0;
  my $k=0;
  if ($pl_len > 0) {
    printf("RX  payload:  ");
    for ($k=0; $k<$pl_len; $k++) {
      my $bval=unpack("C",substr($rx_payload,$k,1));
      printf("0x%.2x ",$bval);
      $lcnt += 4;
      if ($lcnt > 36) {
        printf("\n");
        $lcnt=0;
      }
    }
    printf("\n");
  } else {
    printf(" ...empty payload \r\n");
  }
} # end print_payload

# get_resp_pl   get USB reply response, immediately after a CMD
#               reads the bulk USB data until it is emptied
#     input:    debug, printa results if > 0
#     return:   payload (string context), may be empty
#     output:   rx stats, if debug > 0
#     output:   err msg if NAK detected
sub get_resp_pl {
  my $debug = shift;
  my $ret   = 0;    # number of bytes received on USB
  my $rxbuf ="";    # a string of 8-bit chars
  my $rx    ="";
  # build up the rxbuf until USB is emptied (ret == 0)
  #       NOTE: this code assumes 255 or fewer bytes will be received
  $rxbuf="";
  do {
    $rx="";
    $ret=$dev->bulk_read(0x3,$rx,255,100);
    $rxbuf .= $rx if ($ret > 0);
  } while ($ret>=0);

  # extract payload, check sanity of results
  my ($rx_hdr_sz,$rx_ack_nak,$rx_cksum)=unpack("CCv",$rxbuf);# this is the header
  my $rx_payload= substr($rxbuf,4);                          # payload is what is left
  my $rx_pl_len = length($rx_payload);                       # payload length: may be empty
  if ($ack_nak == $CMD_NAK) {
    printf("get_payload:  NAK response \r\n");
  }
  if ($debug > 0 ) {
    printf("get_payload:  bulk-read %d bytes \n",length($rxbuf));
    printf("get_payload:  hdr-size  %u, ack-nak %u, cksum: 0x%x \n",$rx_hdr_sz,$rx_ack_nak,$rx_cksum);
    printf("get_payload:  pl length %u bytes \n", $rx_pl_len);
  }
  return $rx_payload;
} # end get_resp_pl (receive payload after a CMD)


# send the READ_REG cmd, check sanity of response
# inputs:        reg-set  (A or B)
#                channel  (0 or 1)
#                reg addr (0-11)
# output:   contents of register N
sub cmd_READ_REG () {
  my $READ_DEBUG = 1;
  my $reg_set  = shift;
  my $reg_chan = shift;
  my $reg_addr = shift;
  my $r_set = 0x20;    # default B register set
  my $r_ch=1;          # default 1 chan
  my $cmd_str = "READ";

  if ($reg_addr > 0xB) {
    printf("ERROR: input register address must be between 0 and 11");
    return 1;
  }

  #First, compute base address for regset/chan
  if (uc($reg_set) eq "A") {
    $r_set=0x0;
  }
  if (uc($reg_set) eq "B") {
    $r_set=0x20;
  }
  if ($reg_chan == 0) {
    $r_ch=0x0;
  }
  if ($reg_chan == 1) {
    $r_ch=0x40;
  }

  my $baseAddr=$r_set + $r_ch;
  my $txAddr  =$baseAddr + $reg_addr;
  # printf("READ_REG: register:    %2u \r\n", $reg_addr);
  printf("%s TX: reg num     %02u  \r\n",$cmd_str,$reg_addr)   if $DNP < 1;
  printf("%s TX: addr        0x%2x  \r\n",$cmd_str,$txAddr)    if $DNP < 1;

  $payload=pack("CC",$txAddr,1); # 1 => reading only one register

  #OK Payload's done ... add header
  my $hdr = pack("CCv",(length($payload) + 4),$CMD_READ_REG,0);
  my $txbuf = $hdr . $payload;

  #Write the packet
  my $ix=0;
  do {
    $ret=$dev->bulk_write(0x3,substr($txbuf,$ix),length($txbuf)-$ix,50);
    #die "$cmd_str ERROR writing on bulk USB endpoint\r\n"  if $ret < 0;
    $ix += $ret;
  } while ($ix<length($txbuf));
  printf("%s TX: bulk write  %d bytes\n",$cmd_str,$ix)         if $DNP < 1;

  my $rx_payload="";
  $rx_payload = &get_resp_pl(0);  # debug argument: 0 => off, 1 => on
  &print_payload($rx_payload)                                  if $DNP < 1;
  my ($rx_reg_addr,$rx_reg_num, $rx_data)=unpack("CCC",$rx_payload);# this is the header
  return $rx_data;
} # end of cmd_READ_REG


# send a single register value, 0-11
#   0-8 correspond to taps
#   9,10,11 correspond to gain, offset, AGC
#
sub cmd_WRITE_REG () {
  my $regset   = shift;    # "A" or "B"
  my $chan     = shift;    # "0" or "1"
  my $reg_addr = shift;    # "0" to "11"
  my $reg_data = shift;    # 0x00 to 0xff
  my $cmd_str  = "WRITE";
  my $rset     = 0x40;     # default: rset equivalent to "B"
  my $rch      = 0x20;     # default: equivalent to chan "1": rset + rch = 0x60
  my $regaddr  = 0x0;      # default: tap 0

  if (($reg_addr > 11) || ($reg_addr < 0)) {
    printf("ERROR: input register address must be between 0 and 11, defaulted to 0");
    #return 1;
  } else {
    $regaddr = $reg_addr;
  }

  #First, compute base address for regset/chan
  if (uc($regset) eq "A") {
    $rset=0x0;
  }
  if (uc($regset) eq "B") {
    $rset=0x20;
  }
  if ($chan == 0) {
    $rch=0x0;
  }
  if ($chan == 1) {
    $rch=0x40;
  }
  my $baseAddr=$rset + $rch;
  my $txAddr  =$baseAddr + $regaddr;
  my $txNumReg=1;
  printf("TX  payload:  0x%.2x 0x%.2x 0x%.2x \r\n",$txAddr,$txNumReg,$reg_data) if $DNP < 1;
  my $payload = pack("CCC",
    $txAddr,   # register addr - includes register, chan, bank
    $txNumReg, # only one register
    $reg_data, # value being  sent
    );

  $hdr = pack("CCv",(length($payload) + 4),$CMD_WRITE_REG,0);
  $txbuf = $hdr . $payload;
  $ret=$dev->bulk_write(0x3,$txbuf,length($txbuf),100);
  printf("write-reg: bulk write returns: %d\n",$ret)                   if $DNP < 1;

  my $rx_payload="";
  $rx_payload = &get_resp_pl(0);  # debug off
} # end cmd_WRITE_REG


# Stall, wait for user input
#   this method can be used to modify global vars
#   and therefore control program execution
sub stall () {
  # pause to accept commands, allow gdb attach
 WAIT:
  printf ("Waiting for input 'Y' to continue __ ");
  $_ = <STDIN>;
  if (uc($_) =~ /Y/) {             # could match cmds here...
    print ("Here we go !! \n");    # emit cmd-specific text
  } else {
    goto WAIT;
  }
} # end of sub stall

# main
my $how_many = shift;

$DNP = 1;        #  turn off prints
&ConnectAndFind;

# loop through a set of registers
my $tx_data = 1;
my $rx_data = 0;
my $FAILED  = 1;  # Perl false
my $HOK     = 0;
my $pass    = 0;  # number of regression tests passed
my $fail    = 0;
my $cnt     = 0;
my $bank    = "B";
my $port    = 0;
my $addr    = 0;
my @banks   = ( 'A', 'B' );
# my $expected_fails = 4;    # when shadow-read NOT working, testing reg 5, avoiding reg 6,7
# my $expected_fails = 12;   # when shadow-read NOT working, testing ALL registers
my $expected_fails = 0;      # when shadow-read is  working

if ($how_many <= 1) {
  $bank = "B";
  $port = 1;
  $addr = 4;
  $tx_data=int(rand(255)); # random data, in the range 0-255 (0x00, 0xff)
  $cnt++;
  &cmd_WRITE_REG           ($bank, $port, $addr, $tx_data);
  $rx_data = &cmd_READ_REG ($bank, $port, $addr);
  if ($rx_data != $tx_data) {
    $fail++;
    if ($DNP < 1) {
      printf("bank %s, port %d, reg %02d, data 0x%.2x",$bank,$port,$addr,$tx_data);
    }
    printf(" -- error, failure %d of %d tests \r\n",$fail,$cnt);
    $dev->release_interface(0x2);
    exit $fail;
  }
  print "passed \r\n";
  $dev->release_interface(0x2);
  exit $HOK;
} else {
  foreach (@banks) {
    $bank = $_;
    for ($port=0;$port<2;$port++) {
      for ($addr=0;$addr<12;$addr++) {

        # This version tests one of the "bad" registers 5,6 and 7
        #      and sets the number of expected failures to 4
        # if ( ($addr < 6) || ($addr > 7) ) {
        # This version does not avoid the "bad" registers 5,6 and 7
        #      and sets the number of expected failures to 12
        if ($addr < 12) {
          $tx_data=int(rand(255)); # random data, in the range 0-255 (0x00, 0xff)
          $cnt++;
          &cmd_WRITE_REG           ($bank, $port, $addr, $tx_data);
          $rx_data = &cmd_READ_REG ($bank, $port, $addr);
          if ($rx_data != $tx_data) {
            $fail++;
            if ($DNP < 1) {
              printf("bank %s, port %d, reg %02d, data 0x%.2x",$bank,$port,$addr,$tx_data);
              printf(" -- error, failure %d of %d tests \r\n",$fail,$cnt);
              # exit $fail;
            }
            #    else {
            #      printf(" -- error, failure %d of %d tests \r\n",$fail,$cnt);
            #    }
          } else {
            $pass++;
          }                     # end pass-fail test
          #    $dly=-1000;
          #    while($dly++ > 0) {
          #      $dmmy++;
          #    }
        } # end test of "bad" addresses, allowing one bad address (5) per loop
      }   # end loop over addresses 0-11
    }     # end loop over port 1,2 (0-1)
  }       # end loop over bank A,B
} # end of multi-test


$dev->release_interface(0x2);
if ($fail > $expected_fails) {
  printf("failed %d, greater than the %d expected \r\n",$fail,$expected_fails); # if $DNP < 1;
  exit $FAILED;
}

printf("passed %d of %d tests, %d failures expected \r\n",$pass,$cnt,$fail); # if $DNP < 1;
exit $HOK;


